<?xml version="1.0"?>
<configuration>
  <system.serviceModel>
    <services>
      <service name="Microsoft.Samples.AuthorizationPolicy.CalculatorService" behaviorConfiguration="CalculatorServiceBehavior">
        <host>
          <baseAddresses>
            <!-- configure base address provided by host -->
            <add baseAddress="http://localhost:8001/servicemodelsamples/service" />
          </baseAddresses>
        </host>
        <!-- use base address provided by host, provide two endpoints -->
        <endpoint address="username" binding="wsHttpBinding" bindingConfiguration="Binding1" contract="Microsoft.Samples.AuthorizationPolicy.ICalculator" />
        <endpoint address="certificate" binding="wsHttpBinding" bindingConfiguration="Binding2" contract="Microsoft.Samples.AuthorizationPolicy.ICalculator" />
      </service>
    </services>
    <bindings>
      <wsHttpBinding>
        <!-- Username binding -->
        <binding name="Binding1">
          <security mode="Message">
            <message clientCredentialType="UserName" />
          </security>
        </binding>
        <!-- X509 certificate binding -->
        <binding name="Binding2">
          <security mode="Message">
            <message clientCredentialType="Certificate" />
          </security>
        </binding>
      </wsHttpBinding>
    </bindings>
    <behaviors>
      <serviceBehaviors>
        <behavior name="CalculatorServiceBehavior">
          <serviceDebug includeExceptionDetailInFaults="true" />
          <serviceCredentials>
            <!-- 
            The serviceCredentials behavior allows one to specify a custom validator for username/password combinations.				  
            -->
            <userNameAuthentication userNamePasswordValidationMode="Custom" customUserNamePasswordValidatorType="Microsoft.Samples.AuthorizationPolicy.MyCustomUserNameValidator, service" />
            <!-- 
            The serviceCredentials behavior allows one to specify authentication constraints on client certificates.
            -->
            <clientCertificate>
              <!-- 
              Setting the certificateValidationMode to PeerOrChainTrust means that if the certificate 
              is in the user's Trusted People store, then it will be trusted without performing a
              validation of the certificate's issuer chain. This setting is used here for convenience so that the 
              sample can be run without having to have certificates issued by a certificate authority (CA).
              This setting is less secure than the default, ChainTrust. The security implications of this 
              setting should be carefully considered before using PeerOrChainTrust in production code. 
              -->
              <authentication certificateValidationMode="PeerOrChainTrust" />
            </clientCertificate>
            <!-- 
            The serviceCredentials behavior allows one to define a service certificate.
            A service certificate is used by a client to authenticate the service and provide message protection.
            This configuration references the "localhost" certificate installed during the setup instructions.
            -->
            <serviceCertificate findValue="localhost" storeLocation="LocalMachine" storeName="My" x509FindType="FindBySubjectName" />
          </serviceCredentials>
          <serviceAuthorization serviceAuthorizationManagerType="Microsoft.Samples.AuthorizationPolicy.MyServiceAuthorizationManager, service">
            <!-- 
            The serviceAuthorization behavior allows one to specify custom authorization policies.
            -->
            <authorizationPolicies>
              <add policyType="Microsoft.Samples.AuthorizationPolicy.CustomAuthorizationPolicy.MyAuthorizationPolicy, PolicyLibrary" />
            </authorizationPolicies>
          </serviceAuthorization>
        </behavior>
      </serviceBehaviors>
    </behaviors>
  </system.serviceModel>
</configuration>
