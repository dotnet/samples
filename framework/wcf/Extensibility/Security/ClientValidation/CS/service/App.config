<?xml version="1.0"?>
<configuration>
  <system.serviceModel>
    <services>
      <service name="Microsoft.Samples.ClientValidation.CalculatorService" behaviorConfiguration="CalculatorServiceBehavior">
        <host>
          <baseAddresses>
            <add baseAddress="http://localhost:8000/ServiceModelSamples/service" />
          </baseAddresses>
        </host>
        <!--
            The CompositeDuplexBindingElement contained in this binding will make the
            validator throw an exception
        -->
        <endpoint address="untrustedDual" binding="wsDualHttpBinding" contract="Microsoft.Samples.ClientValidation.ICalculator" />
        <!--
            The ClientCredentialType being is set to Windows on the SecurityBindingElement of 
            this binding and will make the validator throw an exception
        -->
        <endpoint address="untrustedNtlm" binding="wsHttpBinding" bindingConfiguration="untrustedNtlmBinding" contract="Microsoft.Samples.ClientValidation.ICalculator" />
        <!--
            The TransactionFlowBindingElement of this binding is set to true and will
            make the validator throw an exception
        -->
        <endpoint address="untrustedTransaction" binding="wsHttpBinding" bindingConfiguration="untrustedTransactionBinding" contract="Microsoft.Samples.ClientValidation.ICalculator" />
        <!-- This enpoint will not make the validator throw -->
        <endpoint address="safe" binding="basicHttpBinding" bindingConfiguration="safeBinding" contract="Microsoft.Samples.ClientValidation.ICalculator" />
        <!-- This is the mex endpoint -->
        <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange" />
      </service>
    </services>
    <bindings>
      <wsHttpBinding>
        <binding name="untrustedNtlmBinding">
          <security mode="Message">
            <message clientCredentialType="Windows" />
          </security>
        </binding>
        <binding name="untrustedTransactionBinding" transactionFlow="true">
          <security mode="Message">
            <message clientCredentialType="Certificate" />
          </security>
        </binding>
      </wsHttpBinding>
      <basicHttpBinding>
        <binding name="safeBinding">
          <security mode="Message">
            <message clientCredentialType="Certificate" />
          </security>
        </binding>
      </basicHttpBinding>
    </bindings>
    <!--For debugging purposes set the includeExceptionDetailInFaults attribute to true-->
    <behaviors>
      <serviceBehaviors>
        <behavior name="CalculatorServiceBehavior">
          <serviceMetadata httpGetEnabled="True" />
          <serviceDebug includeExceptionDetailInFaults="False" />
          <serviceCredentials>
            <serviceCertificate findValue="localhost" storeLocation="LocalMachine" storeName="My" x509FindType="FindBySubjectName" />
            <clientCertificate>
              <!-- 
            Setting the certificateValidationMode to PeerOrChainTrust means that if the certificate 
            is in the user's Trusted People store, then it will be trusted without performing a
            validation of the certificate's issuer chain. This setting is used here for convenience so that the 
            sample can be run without having to have certificates issued by a certificate authority (CA).
            This setting is less secure than the default, ChainTrust. The security implications of this 
            setting should be carefully considered before using PeerOrChainTrust in production code. 
            -->
              <authentication certificateValidationMode="PeerOrChainTrust" />
            </clientCertificate>
          </serviceCredentials>
        </behavior>
      </serviceBehaviors>
    </behaviors>
  </system.serviceModel>
</configuration>
